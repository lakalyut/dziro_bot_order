
import os
import time
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, filters
)

(
    TABLE, STRENGTH, AROMA, STOPS, BOWL, BOWL_MANUAL, DRAFT, TEA,
    WAITING_ADD_DISH, WAITING_REMOVE_DISH, CONFIRM, EDIT_FIELD
) = range(12)

STRENGTH_CHOICES = [
    ["–õ–µ–≥–∫–∏–π", "–õ–µ–≥–∫–∏–π-–°—Ä–µ–¥–Ω–∏–π"],
    ["–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –î–∞—Ä–∫", "–°—Ä–µ–¥–Ω–∏–π"],
    ["–°—Ä–µ–¥–Ω–∏–π+", "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "–ö—Ä–µ–ø–∫–∏–π"]
]
DRAFT_CHOICES = [["Union", "Yapona", "Wookah"]]
BOWL_CHOICES = [
    [InlineKeyboardButton("–•–∞–π–ø –¢", callback_data="bowl_–•–∞–π–ø –¢"),
     InlineKeyboardButton("–Ø–ø–æ–Ω–∞ –¢", callback_data="bowl_–Ø–ø–æ–Ω–∞ –¢")],
    [InlineKeyboardButton("–ö–æ–Ω—Ü–µ–ø—Ç–∏–∫", callback_data="bowl_–ö–æ–Ω—Ü–µ–ø—Ç–∏–∫"),
     InlineKeyboardButton("–§–∞–Ω–µ–ª", callback_data="bowl_–§–∞–Ω–µ–ª")],
    [InlineKeyboardButton("–≠–ª–∏–∞–Ω", callback_data="bowl_–≠–ª–∏–∞–Ω"),
     InlineKeyboardButton("–ö–°", callback_data="bowl_–ö–°")],
    [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="bowl_manual")],
    [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="skip"),
     InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data="fast_order")]
]

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN_TEST")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID_TEST", "0"))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏ –µ–≥–æ –≤ .env")

TOPICS = {
    "1 –ó–æ–Ω–∞": 5,
    "2 –ó–æ–Ω–∞": 2,
    "2 –≠—Ç–∞–∂": 6,
    "general": None
}

STOPLIST_FILE = "stoplist.txt"

MAIN_MENU_KEYBOARD = [
    [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="main_start")],
    [InlineKeyboardButton("üìã –°—Ç–æ–ø-–ª–∏—Å—Ç", callback_data="main_stoplist")]
]

def load_stop_dishes():
    if not os.path.exists(STOPLIST_FILE):
        return []
    with open(STOPLIST_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def save_stop_dishes(stop_dishes):
    with open(STOPLIST_FILE, "w", encoding="utf-8") as f:
        for dish in stop_dishes:
            f.write(dish + "\n")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(MAIN_MENU_KEYBOARD)
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(MAIN_MENU_KEYBOARD)
        )

async def main_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "main_stoplist":
        await stoplist(update, context)

async def stoplist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_dishes = load_stop_dishes()
    text = "–°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç." if not stop_dishes else \
        "–°—Ç–æ–ø-–ª–∏—Å—Ç:\n" + "\n".join(f"- {dish}" for dish in stop_dishes)
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_dish"),
            InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", callback_data="remove_dish"),
        ],
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_menu")
        ]
    ]
    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def stoplist_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "add_dish":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç:")
        return WAITING_ADD_DISH
    elif query.data == "remove_dish":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞:")
        return WAITING_REMOVE_DISH
    elif query.data == "to_menu":
        await menu(update, context)
        return ConversationHandler.END

async def add_dish_wait(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dish = update.message.text.strip()
    stop_dishes = load_stop_dishes()
    user = update.effective_user
    username = (
        f"@{user.username}" if user.username else user.full_name or user.id
    )
    if dish.lower() in (d.lower() for d in stop_dishes):
        await update.message.reply_text(f"–ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª —É–∂–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")
    else:
        stop_dishes.append(dish)
        save_stop_dishes(stop_dishes)
        await update.message.reply_text(
            f"–ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}."
        )
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=f"‚ûï –ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}."
        )
    await stoplist(update, context)
    return ConversationHandler.END

async def remove_dish_wait(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dish = update.message.text.strip()
    stop_dishes = load_stop_dishes()
    user = update.effective_user
    username = (
        f"@{user.username}" if user.username else user.full_name or user.id
    )
    for d in stop_dishes:
        if d.lower() == dish.lower():
            stop_dishes.remove(d)
            save_stop_dishes(stop_dishes)
            await update.message.reply_text(
                f"–ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}."
            )
            await context.bot.send_message(
                chat_id=TARGET_CHAT_ID,
                text=f"‚ûñ –ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username}."
            )
            break
    else:
        await update.message.reply_text(f"–ü–æ–∑–∏—Ü–∏—è ¬´{dish}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ.")
    await stoplist(update, context)
    return ConversationHandler.END

def get_zone_and_topic_id(table_number: str):
    table_number = table_number.strip()
    try:
        num = int(table_number)
    except ValueError:
        num = None

    if (num is not None and 1 <= num <= 16) or table_number in ["101", "102", "103"]:
        return "1 –ó–æ–Ω–∞", TOPICS["1 –ó–æ–Ω–∞"]
    if (num is not None and 17 <= num <= 32) or table_number in ["104", "105"]:
        return "2 –ó–æ–Ω–∞", TOPICS["2 –ó–æ–Ω–∞"]
    if (num is not None and 33 <= num <= 47) or table_number in ["201", "777"]:
        return "2 –≠—Ç–∞–∂", TOPICS["2 –≠—Ç–∞–∂"]
    return None, None

def order_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="skip"),
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data="fast_order")
        ]
    ])

def strength_keyboard():
    keyboard = [row for row in STRENGTH_CHOICES]
    keyboard.append(["‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"])
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

def draft_keyboard():
    keyboard = [row for row in DRAFT_CHOICES]
    keyboard.append(["‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑"])
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

def bowl_keyboard():
    return InlineKeyboardMarkup(BOWL_CHOICES)

# --- –õ–æ–≥–∏–∫–∞ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ---

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_chat.send_message(
        "–í–æ–ø—Ä–æ—Å 1: –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞?",
        reply_markup=order_keyboard()
    )
    return TABLE

async def table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        table_number = update.message.text
        context.user_data['table'] = table_number
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['table'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return TABLE

    zone, topic_id = get_zone_and_topic_id(context.user_data.get('table', ''))
    context.user_data['zone'] = zone
    context.user_data['topic_id'] = topic_id

    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 2: –ö—Ä–µ–ø–æ—Å—Ç—å?",
            reply_markup=strength_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å 2: –ö—Ä–µ–ø–æ—Å—Ç—å?",
            reply_markup=strength_keyboard()
        )
    return STRENGTH

async def strength(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['strength'] = update.message.text
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['strength'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return STRENGTH

    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 3: –ê—Ä–æ–º–∞—Ç–∏–∫–∞?",
            reply_markup=order_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å 3: –ê—Ä–æ–º–∞—Ç–∏–∫–∞?",
            reply_markup=order_keyboard()
        )
    return AROMA

async def aroma(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_choice = update.message.text.strip().lower()
        stop_dishes = [dish.lower() for dish in load_stop_dishes()]
        for stop_word in stop_dishes:
            if stop_word and stop_word in user_choice:
                await update.message.reply_text(
                    f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∑–∏—Ü–∏—è ¬´{stop_word.capitalize()}¬ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∞—Ä–æ–º–∞—Ç–∏–∫—É.",
                    reply_markup=order_keyboard()
                )
                return AROMA
        context.user_data['aroma'] = update.message.text
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['aroma'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return AROMA

    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 4: –°—Ç–æ–ø—ã?",
            reply_markup=order_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å 4: –°—Ç–æ–ø—ã?",
            reply_markup=order_keyboard()
        )
    return STOPS

async def stops(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['stops'] = update.message.text
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['stops'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return STOPS

    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 5: –ö–∞–∫–∞—è —á–∞—à–∞?",
            reply_markup=bowl_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å 5: –ö–∞–∫–∞—è —á–∞—à–∞?",
            reply_markup=bowl_keyboard()
        )
    return BOWL

async def bowl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['bowl'] = update.message.text
        return await bowl_next(update, context)
    elif update.callback_query:
        data = update.callback_query.data
        if data == "skip":
            context.user_data['bowl'] = ""
            return await bowl_next(update, context)
        elif data == "fast_order":
            return await finish_order(update, context)
        elif data == "bowl_manual":
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—à–∏ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=order_keyboard()
            )
            return BOWL_MANUAL
        elif data.startswith("bowl_"):
            context.user_data['bowl'] = data[5:]
            return await bowl_next(update, context)
    return BOWL

async def bowl_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['bowl'] = update.message.text
        return await bowl_next(update, context)
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['bowl'] = ""
        return await bowl_next(update, context)
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    return BOWL_MANUAL

async def bowl_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 6: –¢—è–≥–∞?",
            reply_markup=draft_keyboard()
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 6: –¢—è–≥–∞?",
            reply_markup=draft_keyboard()
        )
    return DRAFT

async def draft(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['draft'] = update.message.text
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['draft'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return DRAFT

    if update.message:
        await update.message.reply_text(
            "–í–æ–ø—Ä–æ—Å 7: –ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω?",
            reply_markup=order_keyboard()
        )
    else:
        await update.callback_query.edit_message_text(
            "–í–æ–ø—Ä–æ—Å 7: –ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω?",
            reply_markup=order_keyboard()
        )
    return TEA

async def tea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        context.user_data['tea'] = update.message.text
    elif update.callback_query and update.callback_query.data == "skip":
        context.user_data['tea'] = ""
    elif update.callback_query and update.callback_query.data == "fast_order":
        return await finish_order(update, context)
    else:
        return TEA

    return await show_confirm(update, context)

async def show_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    summary = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n"
        f"1Ô∏è‚É£ –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞: {context.user_data.get('table', '')}\n"
        f"2Ô∏è‚É£ –ö—Ä–µ–ø–æ—Å—Ç—å: {context.user_data.get('strength', '')}\n"
        f"3Ô∏è‚É£ –ê—Ä–æ–º–∞—Ç–∏–∫–∞: {context.user_data.get('aroma', '')}\n"
        f"4Ô∏è‚É£ –°—Ç–æ–ø—ã: {context.user_data.get('stops', '')}\n"
        f"5Ô∏è‚É£ –ß–∞—à–∞: {context.user_data.get('bowl', '')}\n"
        f"6Ô∏è‚É£ –¢—è–≥–∞: {context.user_data.get('draft', '')}\n"
        f"7Ô∏è‚É£ –ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {context.user_data.get('tea', '')}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—É–Ω–∫—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑."
    )
    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞", callback_data="edit_table"),
         InlineKeyboardButton("2Ô∏è‚É£ –ö—Ä–µ–ø–æ—Å—Ç—å", callback_data="edit_strength")],
        [InlineKeyboardButton("3Ô∏è‚É£ –ê—Ä–æ–º–∞—Ç–∏–∫–∞", callback_data="edit_aroma"),
         InlineKeyboardButton("4Ô∏è‚É£ –°—Ç–æ–ø—ã", callback_data="edit_stops")],
        [InlineKeyboardButton("5Ô∏è‚É£ –ß–∞—à–∞", callback_data="edit_bowl"),
         InlineKeyboardButton("6Ô∏è‚É£ –¢—è–≥–∞", callback_data="edit_draft")],
        [InlineKeyboardButton("7Ô∏è‚É£ –ß–∞–π", callback_data="edit_tea")],
        [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")]
    ]
    if update.message:
        await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

async def confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()
    if data == "confirm_order":
        return await finish_order(update, context)
    elif data.startswith("edit_"):
        field = data.replace("edit_", "")
        context.user_data["edit_field"] = field
        return await edit_field_start(update, context, field)
    return CONFIRM

async def edit_field_start(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str):
    prompts = {
        "table": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:",
        "strength": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫—Ä–µ–ø–æ—Å—Ç—å:",
        "aroma": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∞—Ä–æ–º–∞—Ç–∏–∫—É:",
        "stops": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ç–æ–ø—ã:",
        "bowl": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—à—É:",
        "draft": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç—è–≥—É:",
        "tea": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω:"
    }
    if field == "strength":
        if update.callback_query:
            await update.callback_query.edit_message_text(prompts[field], reply_markup=strength_keyboard())
        else:
            await update.message.reply_text(prompts[field], reply_markup=strength_keyboard())
        return STRENGTH
    elif field == "draft":
        if update.callback_query:
            await update.callback_query.edit_message_text(prompts[field], reply_markup=draft_keyboard())
        else:
            await update.message.reply_text(prompts[field], reply_markup=draft_keyboard())
        return DRAFT
    elif field == "bowl":
        if update.callback_query:
            await update.callback_query.edit_message_text(prompts[field], reply_markup=bowl_keyboard())
        else:
            await update.message.reply_text(prompts[field], reply_markup=bowl_keyboard())
        return BOWL
    else:
        if update.callback_query:
            await update.callback_query.edit_message_text(prompts[field], reply_markup=order_keyboard())
        else:
            await update.message.reply_text(prompts[field], reply_markup=order_keyboard())
        return {
            "table": TABLE, "aroma": AROMA, "stops": STOPS, "tea": TEA
        }[field]

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    table = context.user_data.get('table', '')
    zone = context.user_data.get('zone', '‚ùì')
    topic_id = context.user_data.get('topic_id')
    order_time = int(time.time())
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.bot_data.setdefault("orders", {})[order_time] = {
        "user_id": user_id,
        "table": table
    }

    summary = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username or update.effective_user.id}:\n"
        f"–ó–æ–Ω–∞: {zone}\n"
        f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞: {context.user_data.get('table', '')}\n"
        f"–ö—Ä–µ–ø–æ—Å—Ç—å: {context.user_data.get('strength', '')}\n"
        f"–ê—Ä–æ–º–∞—Ç–∏–∫–∞: {context.user_data.get('aroma', '')}\n"
        f"–°—Ç–æ–ø—ã: {context.user_data.get('stops', '')}\n"
        f"–ß–∞—à–∞: {context.user_data.get('bowl', '')}\n"
        f"–¢—è–≥–∞: {context.user_data.get('draft', '')}\n"
        f"–ö–∏—Ç–∞–π—Å–∫–∏–π —á–∞–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω: {context.user_data.get('tea', '')}"
    )

    if update.message:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
    elif update.callback_query:
        await update.callback_query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.")

    ready_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í", callback_data=f"order_ready|{order_time}")]
    ])

    if topic_id:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=summary,
            message_thread_id=topic_id,
            reply_markup=ready_keyboard
        )
    else:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=f"(–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —Å—Ç–æ–ª–∞ {table})\n" + summary,
            reply_markup=ready_keyboard
        )

    if zone in ["1 –ó–æ–Ω–∞", "2 –ó–æ–Ω–∞"]:
        general_topic_id = TOPICS["general"]
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=summary,
            message_thread_id=general_topic_id,
            reply_markup=ready_keyboard
        )

    await menu(update, context)
    return ConversationHandler.END

async def order_ready_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("order_ready|"):
        order_time_str = data.split("|")[1]
        try:
            order_time = int(order_time_str)
        except Exception:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞.")
            return

        now = int(time.time())
        elapsed = now - order_time
        mins, secs = divmod(elapsed, 60)
        time_str = f"{mins} –º–∏–Ω {secs} —Å–µ–∫" if mins else f"{secs} —Å–µ–∫"
        text = query.message.text + f"\n\n‚úÖ –ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í!\n‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time_str}"

        await query.edit_message_text(text)

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞ –∏–∑ bot_data
        order_info = context.bot_data.get("orders", {}).get(order_time)
        if order_info:
            user_id = order_info.get("user_id")
            table = order_info.get("table", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í! –ü–û–†–ê –û–¢–î–ê–í–ê–¢–¨ –ó–ê –°–¢–û–õ ‚Ññ{table}."
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler(['menu', 'start'], menu))
    app.add_handler(CallbackQueryHandler(main_menu_button, pattern=r"^main_stoplist$"))
    app.add_handler(CallbackQueryHandler(order_ready_callback, pattern=r"^order_ready\|"))

    stoplist_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(stoplist_button, pattern=r"^(add_dish|remove_dish|to_menu)$")
        ],
        states={
            WAITING_ADD_DISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_dish_wait)],
            WAITING_REMOVE_DISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_dish_wait)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    app.add_handler(stoplist_conv)

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_order, pattern=r"^main_start$")],
        states={
            TABLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, table),
                CallbackQueryHandler(table, pattern=r"^(skip|fast_order)$")
            ],
            STRENGTH: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, strength),
                CallbackQueryHandler(strength, pattern=r"^(skip|fast_order)$")
            ],
            AROMA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, aroma),
                CallbackQueryHandler(aroma, pattern=r"^(skip|fast_order)$")
            ],
            STOPS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, stops),
                CallbackQueryHandler(stops, pattern=r"^(skip|fast_order)$")
            ],
            BOWL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bowl),
                CallbackQueryHandler(bowl)  # <-- pattern —É–±—Ä–∞–Ω!
            ],
            BOWL_MANUAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bowl_manual),
                CallbackQueryHandler(bowl_manual, pattern=r"^(skip|fast_order)$")
            ],
            DRAFT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, draft),
                CallbackQueryHandler(draft, pattern=r"^(skip|fast_order)$")
            ],
            TEA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, tea),
                CallbackQueryHandler(tea, pattern=r"^(skip|fast_order)$")
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_callback)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    app.add_handler(order_conv)

    app.run_polling()

if __name__ == '__main__':
    main()

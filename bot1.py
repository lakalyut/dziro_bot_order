
import os
from dotenv import load_dotenv
import time
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, ConversationHandler, filters
)

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")

TABLE, AROMA, STRENGTH, BOWL, DRAFT, SAVE_TEMPLATE_LABEL, MANUAL_BOWL = range(7)

STRENGTH_CHOICES = [
    ["–õ–µ–≥–∫–∏–π", "–õ–µ–≥–∫–∏–π+", "–õ–µ–≥–∫–∏–π-–°—Ä–µ–¥–Ω–∏–π"],
    ["–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –î–∞—Ä–∫", "–°—Ä–µ–¥–Ω–∏–π"],
    ["–°—Ä–µ–¥–Ω–∏–π+", "–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "–ö—Ä–µ–ø–∫–∏–π"]
]
DRAFT_CHOICES = ["Union", "Yapona", "Wookah"]
BOWL_CHOICES = [
    [InlineKeyboardButton("–ü—Ä—è–º–æ—Ç–æ–∫", callback_data="bowl_–ü—Ä—è–º–æ—Ç–æ–∫"),
     InlineKeyboardButton("–§–∞–Ω–µ–ª", callback_data="bowl_–§–∞–Ω–µ–ª")],
    [InlineKeyboardButton("–§–æ–ª—å–≥–∞", callback_data="bowl_–§–æ–ª—å–≥–∞"),
     InlineKeyboardButton("–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç", callback_data="bowl_–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç")],
    [InlineKeyboardButton("–ì—Ä–∞–Ω–∞—Ç", callback_data="bowl_–ì—Ä–∞–Ω–∞—Ç")],
    [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="bowl_manual")]
]

TOPICS = {
    "1 –ó–æ–Ω–∞": 5,
    "2 –ó–æ–Ω–∞": 2,
    "2 –≠—Ç–∞–∂": 6,
    "general": None
}

def get_zone_and_topic_id(table_number: str):
    table_number = table_number.strip()
    try:
        num = int(table_number)
    except ValueError:
        num = None
    if (num is not None and 1 <= num <= 16) or table_number in ["101", "102", "103"]:
        return "1 –ó–æ–Ω–∞", TOPICS["1 –ó–æ–Ω–∞"]
    if (num is not None and 17 <= num <= 32) or table_number in ["104", "105"]:
        return "2 –ó–æ–Ω–∞", TOPICS["2 –ó–æ–Ω–∞"]
    if (num is not None and 33 <= num <= 47) or table_number in ["201", "777"]:
        return "2 –≠—Ç–∞–∂", TOPICS["2 –≠—Ç–∞–∂"]
    return "General", TOPICS["general"]

def get_order_keyboard(context):
    data = context.user_data
    def val(key): return data.get(key, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"–°—Ç–æ–ª: {val('table')}", callback_data="edit_table")],
        [InlineKeyboardButton(f"–ê—Ä–æ–º–∞—Ç–∏–∫–∞: {val('aroma')}", callback_data="edit_aroma")],
        [InlineKeyboardButton(f"–ö—Ä–µ–ø–æ—Å—Ç—å: {val('strength')}", callback_data="edit_strength")],
        [InlineKeyboardButton(f"–ß–∞—à–∞: {val('bowl')}", callback_data="edit_bowl")],
        [InlineKeyboardButton(f"–¢—è–≥–∞: {val('draft')}", callback_data="edit_draft")],
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="send_order")]
    ])

def get_table_input_keyboard(current_value: str):
    keyboard = [
        [InlineKeyboardButton("1", callback_data="table_digit_1"),
         InlineKeyboardButton("2", callback_data="table_digit_2"),
         InlineKeyboardButton("3", callback_data="table_digit_3")],
        [InlineKeyboardButton("4", callback_data="table_digit_4"),
         InlineKeyboardButton("5", callback_data="table_digit_5"),
         InlineKeyboardButton("6", callback_data="table_digit_6")],
        [InlineKeyboardButton("7", callback_data="table_digit_7"),
         InlineKeyboardButton("8", callback_data="table_digit_8"),
         InlineKeyboardButton("9", callback_data="table_digit_9")],
        [InlineKeyboardButton("0", callback_data="table_digit_0")],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –°—Ç–µ—Ä–µ—Ç—å", callback_data="table_digit_backspace"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="table_digit_done")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="main_order")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data="quick_order_menu")]
    ]
    if update.message:
        msg = await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data["order_msg_id"] = msg.message_id
    else:
        msg = await update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data["order_msg_id"] = msg.message_id

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_msg_id = context.user_data.get("order_msg_id")
    context.user_data.clear()
    if order_msg_id:
        context.user_data["order_msg_id"] = order_msg_id
    await update.callback_query.answer()
    msg = await update.callback_query.edit_message_text(
        "–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_order_keyboard(context)
    )
    context.user_data["order_msg_id"] = msg.message_id

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    field = query.data.replace("edit_", "")
    context.user_data["edit_field"] = field
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = query.message.chat_id

    if field == "strength":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text, callback_data=f"strength_{text}") for text in row]
            for row in STRENGTH_CHOICES
        ])
        await context.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=keyboard
        )
        return STRENGTH
    elif field == "bowl":
        await context.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—à—É:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=InlineKeyboardMarkup(BOWL_CHOICES)
        )
        return BOWL
    elif field == "draft":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text, callback_data=f"draft_{text}")]
            for text in DRAFT_CHOICES
        ])
        await context.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—è–≥—É:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=keyboard
        )
        return DRAFT
    elif field == "table":
        context.user_data["table_input"] = ""
        await context.bot.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:\n\n<b>{'' if '' else '‚Äî'}</b>",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_table_input_keyboard(""),
            parse_mode="HTML"
        )
        return TABLE
    else:
        prompts = {
            "aroma": "–í–≤–µ–¥–∏—Ç–µ –∞—Ä–æ–º–∞—Ç–∏–∫—É:"
        }
        await context.bot.edit_message_text(
            prompts[field],
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=None
        )
        return AROMA

async def table_digit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = query.message.chat_id

    value = context.user_data.get("table_input", "")

    if data.startswith("table_digit_"):
        action = data.replace("table_digit_", "")
        if action.isdigit():
            value += action
        elif action == "backspace":
            value = value[:-1]
        elif action == "done":
            if value:
                context.user_data["table"] = value
                context.user_data["edit_field"] = None
                if context.user_data.get("from_quick"):
                    context.user_data.pop("from_quick")
                    await send_order(update, context, from_quick=True)
                    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º order_msg_id! ---
                    order_msg_id = context.user_data.get("order_msg_id")
                    context.user_data.clear()
                    if order_msg_id:
                        context.user_data["order_msg_id"] = order_msg_id
                    await menu(update, context)
                    return ConversationHandler.END
                else:
                    try:
                        await context.bot.edit_message_text(
                            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                            chat_id=chat_id,
                            message_id=order_msg_id,
                            reply_markup=get_order_keyboard(context)
                        )
                    except Exception:
                        pass
                    return ConversationHandler.END
            else:
                try:
                    await context.bot.edit_message_text(
                        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:\n\n<b>{value if value else '‚Äî'}</b>\n\n‚ùó –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.",
                        chat_id=chat_id,
                        message_id=order_msg_id,
                        reply_markup=get_table_input_keyboard(value),
                        parse_mode="HTML"
                    )
                except Exception:
                    pass
                return TABLE

    context.user_data["table_input"] = value
    try:
        await context.bot.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:\n\n<b>{value if value else '‚Äî'}</b>",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_table_input_keyboard(value),
            parse_mode="HTML"
        )
    except Exception:
        pass
    return TABLE

async def save_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = context.user_data.get("edit_field")
    if field not in ["aroma", "bowl"]:
        return
    context.user_data[field] = update.message.text
    context.user_data["edit_field"] = None

    order_msg_id = context.user_data.get('order_msg_id')
    chat_id = update.effective_chat.id

    if context.user_data.get("from_quick"):
        context.user_data.pop("from_quick")
        await send_order(update, context, from_quick=True)
        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º order_msg_id! ---
        order_msg_id = context.user_data.get("order_msg_id")
        context.user_data.clear()
        if order_msg_id:
            context.user_data["order_msg_id"] = order_msg_id
        await menu(update, context)
        return ConversationHandler.END

    try:
        await context.bot.edit_message_text(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_order_keyboard(context)
        )
    except Exception:
        pass
    return ConversationHandler.END

async def save_strength_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = query.data.replace("strength_", "")
    context.user_data["strength"] = text
    context.user_data["edit_field"] = None
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = query.message.chat_id
    try:
        await context.bot.edit_message_text(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_order_keyboard(context)
        )
    except Exception:
        pass
    return ConversationHandler.END

async def save_draft_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = query.data.replace("draft_", "")
    context.user_data["draft"] = text
    context.user_data["edit_field"] = None
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = query.message.chat_id
    try:
        await context.bot.edit_message_text(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_order_keyboard(context)
        )
    except Exception:
        pass
    return ConversationHandler.END

async def bowl_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = query.message.chat_id
    if data == "bowl_manual":
        context.user_data["edit_field"] = "bowl"
        try:
            await context.bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—à–∏ –≤—Ä—É—á–Ω—É—é:",
                chat_id=chat_id,
                message_id=order_msg_id,
                reply_markup=None
            )
        except Exception:
            pass
        return MANUAL_BOWL
    elif data.startswith("bowl_"):
        context.user_data["bowl"] = data[5:]
        context.user_data["edit_field"] = None
        try:
            await context.bot.edit_message_text(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                chat_id=chat_id,
                message_id=order_msg_id,
                reply_markup=get_order_keyboard(context)
            )
        except Exception:
            pass
        return ConversationHandler.END

async def save_manual_bowl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["bowl"] = update.message.text
    context.user_data["edit_field"] = None
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.effective_chat.id
    try:
        await context.bot.edit_message_text(
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–ú–µ–Ω—é –∑–∞–∫–∞–∑–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–Ω–∫—Ç –¥–ª—è –≤–≤–æ–¥–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=get_order_keyboard(context)
        )
    except Exception:
        pass
    return ConversationHandler.END

async def send_order(update: Update, context: ContextTypes.DEFAULT_TYPE, from_quick=False):
    data = context.user_data
    table = data.get('table', '')
    zone, topic_id = get_zone_and_topic_id(table)
    user_id = update.effective_user.id
    order_time = int(time.time())

    summary = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.effective_user.username or update.effective_user.id}:\n"
        f"–ó–æ–Ω–∞: {zone}\n"
        f"–°—Ç–æ–ª: {table}\n"
        f"–ê—Ä–æ–º–∞—Ç–∏–∫–∞: {data.get('aroma', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"–ö—Ä–µ–ø–æ—Å—Ç—å: {data.get('strength', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"–ß–∞—à–∞: {data.get('bowl', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
        f"–¢—è–≥–∞: {data.get('draft', '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ')}\n"
    )
    ready_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í", callback_data=f"order_ready|{order_time}")]
    ])

    context.bot_data.setdefault("orders", {})[order_time] = {
        "user_id": user_id,
        "table": table
    }

    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.effective_chat.id if update.effective_chat else None
    if not from_quick:
        try:
            if order_msg_id and chat_id:
                await context.bot.edit_message_text(
                    "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                    chat_id=chat_id,
                    message_id=order_msg_id,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data="save_as_template")],
                        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="main_order")],
                        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data="quick_order_menu")]
                    ])
                )
            elif hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text(
                    "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω", callback_data="save_as_template")],
                        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="main_order")],
                        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data="quick_order_menu")]
                    ])
                )
        except Exception:
            pass
    # –í —Ä–µ–∂–∏–º–µ from_quick –Ω–µ –¥–µ–ª–∞–µ–º edit_message_text!

    if topic_id is not None:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=summary,
            message_thread_id=topic_id,
            reply_markup=ready_keyboard
        )
    else:
        await context.bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=f"(–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è —Å—Ç–æ–ª–∞ {table})\n" + summary,
            reply_markup=ready_keyboard
        )

async def to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_msg_id = context.user_data.get("order_msg_id")
    context.user_data.clear()
    if order_msg_id:
        context.user_data["order_msg_id"] = order_msg_id
    await menu(update, context)

async def order_ready_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("order_ready|"):
        order_time_str = data.split("|")[1]
        try:
            order_time = int(order_time_str)
        except Exception:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞.")
            return

        now = int(time.time())
        elapsed = now - order_time
        mins, secs = divmod(elapsed, 60)
        time_str = f"{mins} –º–∏–Ω {secs} —Å–µ–∫" if mins else f"{secs} —Å–µ–∫"
        text = query.message.text + f"\n\n‚úÖ –ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í!\n‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time_str}"

        await query.edit_message_text(text)

        order_info = context.bot_data.get("orders", {}).get(order_time)
        if order_info:
            user_id = order_info.get("user_id")
            table = order_info.get("table", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–ö–ê–õ–¨–Ø–ù –ì–û–¢–û–í! –ü–û–†–ê –û–¢–î–ê–í–ê–¢–¨ –ó–ê –°–¢–û–õ ‚Ññ{table}."
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ----------- –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–∫–∞–∑—ã (—à–∞–±–ª–æ–Ω—ã) -----------

async def quick_order_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quick_orders = context.bot_data.get("quick_orders", [])
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.effective_chat.id if update.effective_chat else update.callback_query.message.chat_id

    if not quick_orders:
        try:
            await context.bot.edit_message_text(
                "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                chat_id=chat_id,
                message_id=order_msg_id,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="to_menu")]
                ])
            )
        except Exception:
            pass
        return

    keyboard = [
        [InlineKeyboardButton(tpl["label"], callback_data=f"quick_order_apply_{i}")]
        for i, tpl in enumerate(quick_orders)
    ]
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="to_menu")])
    try:
        await context.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞:",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception:
        pass

async def quick_order_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = int(update.callback_query.data.replace("quick_order_apply_", ""))
    templates = context.bot_data.get("quick_orders", [])
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.callback_query.message.chat_id

    if idx >= len(templates):
        try:
            await context.bot.edit_message_text(
                "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                chat_id=chat_id,
                message_id=order_msg_id,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="to_menu")]
                ])
            )
        except Exception:
            pass
        return ConversationHandler.END

    tpl = templates[idx]
    # --- –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_msg_id –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π! ---
    context.user_data.clear()
    if order_msg_id:
        context.user_data["order_msg_id"] = order_msg_id
    # -----------------------------------------
    for key, value in tpl["order"].items():
        if key != "table":
            context.user_data[key] = value

    if not context.user_data.get("table"):
        context.user_data["edit_field"] = "table"
        context.user_data["from_quick"] = True
        context.user_data["table_input"] = ""
        try:
            await context.bot.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:\n\n<b>{context.user_data['table_input'] if context.user_data['table_input'] else '‚Äî'}</b>",
                chat_id=chat_id,
                message_id=order_msg_id,
                reply_markup=get_table_input_keyboard(context.user_data["table_input"]),
                parse_mode="HTML"
            )
        except Exception:
            pass
        return TABLE
    else:
        await send_order(update, context, from_quick=True)
        context.user_data.clear()
        if order_msg_id:
            context.user_data["order_msg_id"] = order_msg_id
        await menu(update, context)
        return ConversationHandler.END

async def save_as_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.callback_query.message.chat_id
    try:
        await context.bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –§–ò–û –≥–æ—Å—Ç—è):",
            chat_id=chat_id,
            message_id=order_msg_id,
            reply_markup=None
        )
    except Exception:
        pass
    return SAVE_TEMPLATE_LABEL

async def save_template_label(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = update.message.text
    order = {
        "aroma": context.user_data.get("aroma"),
        "strength": context.user_data.get("strength"),
        "bowl": context.user_data.get("bowl"),
        "draft": context.user_data.get("draft")
    }
    tpl = {"label": label, "order": order}

    quick_orders = context.bot_data.setdefault("quick_orders", [])
    quick_orders.append(tpl)

    order_msg_id = context.user_data.get("order_msg_id")
    chat_id = update.effective_chat.id
    try:
        await context.bot.edit_message_text(
            f"–®–∞–±–ª–æ–Ω '{label}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            chat_id=chat_id,
            message_id=order_msg_id
        )
    except Exception:
        pass
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º order_msg_id! ---
    order_msg_id = context.user_data.get("order_msg_id")
    context.user_data.clear()
    if order_msg_id:
        context.user_data["order_msg_id"] = order_msg_id
    await menu(update, context)
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler(['menu', 'start'], menu))
    app.add_handler(CallbackQueryHandler(start_order, pattern="^main_order$"))
    app.add_handler(CallbackQueryHandler(send_order, pattern="^send_order$"))
    app.add_handler(CallbackQueryHandler(order_ready_callback, pattern=r"^order_ready\|"))
    app.add_handler(CallbackQueryHandler(to_menu_callback, pattern="^to_menu$"))

    # –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–∫–∞–∑—ã
    app.add_handler(CallbackQueryHandler(quick_order_menu, pattern="^quick_order_menu$"))

    order_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(edit_field, pattern=r"^edit_"),
            CallbackQueryHandler(bowl_choice, pattern=r"^bowl_.*|bowl_manual$"),
            CallbackQueryHandler(save_as_template, pattern="^save_as_template$"),
            CallbackQueryHandler(quick_order_apply, pattern="^quick_order_apply_"),
            CallbackQueryHandler(save_strength_callback, pattern=r"^strength_"),
            CallbackQueryHandler(save_draft_callback, pattern=r"^draft_"),
            CallbackQueryHandler(table_digit_callback, pattern="^table_digit_"),
        ],
        states={
            TABLE: [CallbackQueryHandler(table_digit_callback, pattern="^table_digit_")],
            AROMA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_field)],
            STRENGTH: [CallbackQueryHandler(save_strength_callback, pattern=r"^strength_")],
            BOWL: [
                CallbackQueryHandler(bowl_choice, pattern=r"^bowl_.*|bowl_manual$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, save_manual_bowl)
            ],
            DRAFT: [CallbackQueryHandler(save_draft_callback, pattern=r"^draft_")],
            MANUAL_BOWL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_manual_bowl)],
            SAVE_TEMPLATE_LABEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_template_label)],
        },
        fallbacks=[CommandHandler('cancel', menu)],
        allow_reentry=True
    )
    app.add_handler(order_conv)

    app.run_polling()

if __name__ == "__main__":
    main()
